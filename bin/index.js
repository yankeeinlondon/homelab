var v=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var E=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var m=E((W,$)=>{$.exports={name:"dotenv",version:"16.4.7",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard",pretest:"npm run lint && npm run dts-check",test:"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@types/node":"^18.11.3",decache:"^4.6.2",sinon:"^14.0.1",standard:"^17.0.0","standard-version":"^9.5.0",tap:"^19.2.0",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:!1}}});var V=E((J,u)=>{"use strict";var _=v("fs"),h=v("path"),C=v("os"),x=v("crypto"),Y=m(),N=Y.version,k=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function F(e){let t={},r=e.toString();r=r.replace(/\r\n?/mg,`
`);let s;for(;(s=k.exec(r))!=null;){let c=s[1],n=s[2]||"";n=n.trim();let o=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),o==='"'&&(n=n.replace(/\\n/g,`
`),n=n.replace(/\\r/g,"\r")),t[c]=n}return t}function K(e){let t=y(e),r=i.configDotenv({path:t});if(!r.parsed){let o=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw o.code="MISSING_DATA",o}let s=O(e).split(","),c=s.length,n;for(let o=0;o<c;o++)try{let a=s[o].trim(),l=R(r,a);n=i.decrypt(l.ciphertext,l.key);break}catch(a){if(o+1>=c)throw a}return i.parse(n)}function j(e){console.log(`[dotenv@${N}][INFO] ${e}`)}function L(e){console.log(`[dotenv@${N}][WARN] ${e}`)}function g(e){console.log(`[dotenv@${N}][DEBUG] ${e}`)}function O(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function R(e,t){let r;try{r=new URL(t)}catch(a){if(a.code==="ERR_INVALID_URL"){let l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw a}let s=r.password;if(!s){let a=new Error("INVALID_DOTENV_KEY: Missing key part");throw a.code="INVALID_DOTENV_KEY",a}let c=r.searchParams.get("environment");if(!c){let a=new Error("INVALID_DOTENV_KEY: Missing environment part");throw a.code="INVALID_DOTENV_KEY",a}let n=`DOTENV_VAULT_${c.toUpperCase()}`,o=e.parsed[n];if(!o){let a=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${n} in your .env.vault file.`);throw a.code="NOT_FOUND_DOTENV_ENVIRONMENT",a}return{ciphertext:o,key:s}}function y(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(let r of e.path)_.existsSync(r)&&(t=r.endsWith(".vault")?r:`${r}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=h.resolve(process.cwd(),".env.vault");return _.existsSync(t)?t:null}function D(e){return e[0]==="~"?h.join(C.homedir(),e.slice(1)):e}function G(e){j("Loading env from encrypted .env.vault");let t=i._parseVault(e),r=process.env;return e&&e.processEnv!=null&&(r=e.processEnv),i.populate(r,t,e),{parsed:t}}function U(e){let t=h.resolve(process.cwd(),".env"),r="utf8",s=!!(e&&e.debug);e&&e.encoding?r=e.encoding:s&&g("No encoding is specified. UTF-8 is used by default");let c=[t];if(e&&e.path)if(!Array.isArray(e.path))c=[D(e.path)];else{c=[];for(let l of e.path)c.push(D(l))}let n,o={};for(let l of c)try{let p=i.parse(_.readFileSync(l,{encoding:r}));i.populate(o,p,e)}catch(p){s&&g(`Failed to load ${l} ${p.message}`),n=p}let a=process.env;return e&&e.processEnv!=null&&(a=e.processEnv),i.populate(a,o,e),n?{parsed:o,error:n}:{parsed:o}}function M(e){if(O(e).length===0)return i.configDotenv(e);let t=y(e);return t?i._configVault(e):(L(`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`),i.configDotenv(e))}function P(e,t){let r=Buffer.from(t.slice(-64),"hex"),s=Buffer.from(e,"base64"),c=s.subarray(0,12),n=s.subarray(-16);s=s.subarray(12,-16);try{let o=x.createDecipheriv("aes-256-gcm",r,c);return o.setAuthTag(n),`${o.update(s)}${o.final()}`}catch(o){let a=o instanceof RangeError,l=o.message==="Invalid key length",p=o.message==="Unsupported state or unable to authenticate data";if(a||l){let d=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw d.code="INVALID_DOTENV_KEY",d}else if(p){let d=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw d.code="DECRYPTION_FAILED",d}else throw o}}function S(e,t,r={}){let s=!!(r&&r.debug),c=!!(r&&r.override);if(typeof t!="object"){let n=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw n.code="OBJECT_REQUIRED",n}for(let n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(c===!0&&(e[n]=t[n]),s&&g(c===!0?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}var i={configDotenv:U,_configVault:G,_parseVault:K,config:M,decrypt:P,parse:F,populate:S};u.exports.configDotenv=i.configDotenv;u.exports._configVault=i._configVault;u.exports._parseVault=i._parseVault;u.exports.config=i.config;u.exports.decrypt=i.decrypt;u.exports.parse=i.parse;u.exports.populate=i.populate;u.exports=i});var T=E((Q,I)=>{"use strict";var f={};process.env.DOTENV_CONFIG_ENCODING!=null&&(f.encoding=process.env.DOTENV_CONFIG_ENCODING);process.env.DOTENV_CONFIG_PATH!=null&&(f.path=process.env.DOTENV_CONFIG_PATH);process.env.DOTENV_CONFIG_DEBUG!=null&&(f.debug=process.env.DOTENV_CONFIG_DEBUG);process.env.DOTENV_CONFIG_OVERRIDE!=null&&(f.override=process.env.DOTENV_CONFIG_OVERRIDE);process.env.DOTENV_CONFIG_DOTENV_KEY!=null&&(f.DOTENV_KEY=process.env.DOTENV_CONFIG_DOTENV_KEY);I.exports=f});var w=E((z,b)=>{"use strict";var B=/^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/;b.exports=function(t){return t.reduce(function(r,s){let c=s.match(B);return c&&(r[c[1]]=c[2]),r},{})}});import"chalk";(function(){V().config(Object.assign({},T(),w()(process.argv)))})();import{dirname as q}from"pathe";var A=q(import.meta.url),re=[`${A}/.homelab.ts`,`${A}/.homelab.yaml`,`${process.env.HOME}/.homelab.yaml`,`${process.env.HOME}/.config/homelab/config.yaml`],ne=`${process.env.HOME}/.config/homelab/config.yaml`;export{A as CLI_DIRECTORY,re as CONFIG_LOCATIONS,ne as DEFAULT_CONFIG_LOCATION};
//# sourceMappingURL=index.js.map